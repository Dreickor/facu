// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/16/2022 20:52:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PARTED
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PARTED_vlg_sample_tst(
	clock,
	reset,
	X,
	sampler_tx
);
input  clock;
input  reset;
input  X;
output sampler_tx;

reg sample;
time current_time;
always @(clock or reset or X)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PARTED_vlg_check_tst (
	Led1,
	Led2,
	Led3,
	Led4,
	sampler_rx
);
input  Led1;
input  Led2;
input  Led3;
input  Led4;
input sampler_rx;

reg  Led1_expected;
reg  Led2_expected;
reg  Led3_expected;
reg  Led4_expected;

reg  Led1_prev;
reg  Led2_prev;
reg  Led3_prev;
reg  Led4_prev;

reg  Led1_expected_prev;
reg  Led2_expected_prev;
reg  Led3_expected_prev;
reg  Led4_expected_prev;

reg  last_Led1_exp;
reg  last_Led2_exp;
reg  last_Led3_exp;
reg  last_Led4_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Led1_prev = Led1;
	Led2_prev = Led2;
	Led3_prev = Led3;
	Led4_prev = Led4;
end

// update expected /o prevs

always @(trigger)
begin
	Led1_expected_prev = Led1_expected;
	Led2_expected_prev = Led2_expected;
	Led3_expected_prev = Led3_expected;
	Led4_expected_prev = Led4_expected;
end



// expected Led1
initial
begin
	Led1_expected = 1'bX;
end 

// expected Led2
initial
begin
	Led2_expected = 1'bX;
end 

// expected Led3
initial
begin
	Led3_expected = 1'bX;
end 

// expected Led4
initial
begin
	Led4_expected = 1'bX;
end 
// generate trigger
always @(Led1_expected or Led1 or Led2_expected or Led2 or Led3_expected or Led3 or Led4_expected or Led4)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Led1 = %b | expected Led2 = %b | expected Led3 = %b | expected Led4 = %b | ",Led1_expected_prev,Led2_expected_prev,Led3_expected_prev,Led4_expected_prev);
	$display("| real Led1 = %b | real Led2 = %b | real Led3 = %b | real Led4 = %b | ",Led1_prev,Led2_prev,Led3_prev,Led4_prev);
`endif
	if (
		( Led1_expected_prev !== 1'bx ) && ( Led1_prev !== Led1_expected_prev )
		&& ((Led1_expected_prev !== last_Led1_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led1_expected_prev);
		$display ("     Real value = %b", Led1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Led1_exp = Led1_expected_prev;
	end
	if (
		( Led2_expected_prev !== 1'bx ) && ( Led2_prev !== Led2_expected_prev )
		&& ((Led2_expected_prev !== last_Led2_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led2_expected_prev);
		$display ("     Real value = %b", Led2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Led2_exp = Led2_expected_prev;
	end
	if (
		( Led3_expected_prev !== 1'bx ) && ( Led3_prev !== Led3_expected_prev )
		&& ((Led3_expected_prev !== last_Led3_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led3_expected_prev);
		$display ("     Real value = %b", Led3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Led3_exp = Led3_expected_prev;
	end
	if (
		( Led4_expected_prev !== 1'bx ) && ( Led4_prev !== Led4_expected_prev )
		&& ((Led4_expected_prev !== last_Led4_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Led4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Led4_expected_prev);
		$display ("     Real value = %b", Led4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Led4_exp = Led4_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PARTED_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
reg X;
// wires                                               
wire Led1;
wire Led2;
wire Led3;
wire Led4;

wire sampler;                             

// assign statements (if any)                          
PARTED i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.Led1(Led1),
	.Led2(Led2),
	.Led3(Led3),
	.Led4(Led4),
	.reset(reset),
	.X(X)
);

// clock
initial
begin
	repeat(12)
	begin
		clock = 1'b0;
		clock = #40000 1'b1;
		# 40000;
	end
	clock = 1'b0;
end 

// X
initial
begin
	X = 1'b1;
end 

PARTED_vlg_sample_tst tb_sample (
	.clock(clock),
	.reset(reset),
	.X(X),
	.sampler_tx(sampler)
);

PARTED_vlg_check_tst tb_out(
	.Led1(Led1),
	.Led2(Led2),
	.Led3(Led3),
	.Led4(Led4),
	.sampler_rx(sampler)
);
endmodule

