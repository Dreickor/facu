// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2022 18:01:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block1_vlg_sample_tst(
	a0,
	a1,
	a2,
	a3,
	b0,
	b1,
	b2,
	b3,
	cin,
	clk,
	sampler_tx
);
input  a0;
input  a1;
input  a2;
input  a3;
input  b0;
input  b1;
input  b2;
input  b3;
input  cin;
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(a0 or a1 or a2 or a3 or b0 or b1 or b2 or b3 or cin or clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block1_vlg_check_tst (
	cout,
	N,
	res0,
	res1,
	res2,
	res3,
	V,
	z,
	sampler_rx
);
input  cout;
input  N;
input  res0;
input  res1;
input  res2;
input  res3;
input  V;
input  z;
input sampler_rx;

reg  cout_expected;
reg  N_expected;
reg  res0_expected;
reg  res1_expected;
reg  res2_expected;
reg  res3_expected;
reg  V_expected;
reg  z_expected;

reg  cout_prev;
reg  N_prev;
reg  res0_prev;
reg  res1_prev;
reg  res2_prev;
reg  res3_prev;
reg  V_prev;
reg  z_prev;

reg  res0_expected_prev;
reg  res1_expected_prev;
reg  res2_expected_prev;
reg  res3_expected_prev;

reg  last_res0_exp;
reg  last_res1_exp;
reg  last_res2_exp;
reg  last_res3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	cout_prev = cout;
	N_prev = N;
	res0_prev = res0;
	res1_prev = res1;
	res2_prev = res2;
	res3_prev = res3;
	V_prev = V;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	res0_expected_prev = res0_expected;
	res1_expected_prev = res1_expected;
	res2_expected_prev = res2_expected;
	res3_expected_prev = res3_expected;
end



// expected res0
initial
begin
	res0_expected = 1'bX;
end 

// expected res1
initial
begin
	res1_expected = 1'bX;
end 

// expected res2
initial
begin
	res2_expected = 1'bX;
end 

// expected res3
initial
begin
	res3_expected = 1'bX;
end 
// generate trigger
always @(cout_expected or cout or N_expected or N or res0_expected or res0 or res1_expected or res1 or res2_expected or res2 or res3_expected or res3 or V_expected or V or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cout = %b | expected N = %b | expected res0 = %b | expected res1 = %b | expected res2 = %b | expected res3 = %b | expected V = %b | expected z = %b | ",cout_expected_prev,N_expected_prev,res0_expected_prev,res1_expected_prev,res2_expected_prev,res3_expected_prev,V_expected_prev,z_expected_prev);
	$display("| real cout = %b | real N = %b | real res0 = %b | real res1 = %b | real res2 = %b | real res3 = %b | real V = %b | real z = %b | ",cout_prev,N_prev,res0_prev,res1_prev,res2_prev,res3_prev,V_prev,z_prev);
`endif
	if (
		( res0_expected_prev !== 1'bx ) && ( res0_prev !== res0_expected_prev )
		&& ((res0_expected_prev !== last_res0_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res0_expected_prev);
		$display ("     Real value = %b", res0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_res0_exp = res0_expected_prev;
	end
	if (
		( res1_expected_prev !== 1'bx ) && ( res1_prev !== res1_expected_prev )
		&& ((res1_expected_prev !== last_res1_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res1_expected_prev);
		$display ("     Real value = %b", res1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_res1_exp = res1_expected_prev;
	end
	if (
		( res2_expected_prev !== 1'bx ) && ( res2_prev !== res2_expected_prev )
		&& ((res2_expected_prev !== last_res2_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res2_expected_prev);
		$display ("     Real value = %b", res2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_res2_exp = res2_expected_prev;
	end
	if (
		( res3_expected_prev !== 1'bx ) && ( res3_prev !== res3_expected_prev )
		&& ((res3_expected_prev !== last_res3_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port res3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", res3_expected_prev);
		$display ("     Real value = %b", res3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_res3_exp = res3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg b0;
reg b1;
reg b2;
reg b3;
reg cin;
reg clk;
// wires                                               
wire cout;
wire N;
wire res0;
wire res1;
wire res2;
wire res3;
wire V;
wire z;

wire sampler;                             

// assign statements (if any)                          
Block1 i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.cin(cin),
	.clk(clk),
	.cout(cout),
	.N(N),
	.res0(res0),
	.res1(res1),
	.res2(res2),
	.res3(res3),
	.V(V),
	.z(z)
);

// clk
always
begin
	clk = 1'b0;
	clk = #250000 1'b1;
	#250000;
end 

// a0
initial
begin
	a0 = 1'b1;
end 

// a1
initial
begin
	a1 = 1'b1;
end 

// a2
initial
begin
	a2 = 1'b0;
end 

// a3
initial
begin
	a3 = 1'b0;
end 

// b0
initial
begin
	b0 = 1'b1;
end 

// b1
initial
begin
	b1 = 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
end 

// cin
initial
begin
	cin = 1'b0;
end 

Block1_vlg_sample_tst tb_sample (
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.cin(cin),
	.clk(clk),
	.sampler_tx(sampler)
);

Block1_vlg_check_tst tb_out(
	.cout(cout),
	.N(N),
	.res0(res0),
	.res1(res1),
	.res2(res2),
	.res3(res3),
	.V(V),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

